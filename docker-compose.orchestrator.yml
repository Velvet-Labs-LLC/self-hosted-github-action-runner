version: '3.8'

services:
  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    container_name: github-runner-orchestrator
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics port
    environment:
      # GitHub Configuration
      ORCHESTRATOR_GITHUB_TOKEN: ${GITHUB_TOKEN}
      ORCHESTRATOR_GITHUB_ORG: ${GITHUB_ORG:-}
      ORCHESTRATOR_GITHUB_REPO: ${GITHUB_REPO:-}
      
      # Runner Configuration
      ORCHESTRATOR_RUNNER_IMAGE: ${RUNNER_IMAGE:-ghcr.io/apexcapital/runner:latest}
      ORCHESTRATOR_RUNNER_VERSION: ${RUNNER_VERSION:-2.325.0}
      
      # Scaling Configuration
      ORCHESTRATOR_MIN_RUNNERS: ${MIN_RUNNERS:-2}
      ORCHESTRATOR_MAX_RUNNERS: ${MAX_RUNNERS:-10}
      ORCHESTRATOR_SCALE_UP_THRESHOLD: ${SCALE_UP_THRESHOLD:-3}
      ORCHESTRATOR_SCALE_DOWN_THRESHOLD: ${SCALE_DOWN_THRESHOLD:-1}
      ORCHESTRATOR_IDLE_TIMEOUT: ${IDLE_TIMEOUT:-300}
      
      # Monitoring Configuration
      ORCHESTRATOR_POLL_INTERVAL: ${POLL_INTERVAL:-30}
      ORCHESTRATOR_METRICS_PORT: 9090
      
      # Docker Configuration
      ORCHESTRATOR_DOCKER_SOCKET: unix:///var/run/docker.sock
      ORCHESTRATOR_RUNNER_NETWORK: ${RUNNER_NETWORK:-runner-network}
      
      # Logging Configuration
      ORCHESTRATOR_LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ORCHESTRATOR_STRUCTURED_LOGGING: ${STRUCTURED_LOGGING:-true}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - orchestrator-logs:/app/logs
    networks:
      - runner-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.orchestrator.rule=Host(`runner-orchestrator.local`)"
      - "traefik.http.services.orchestrator.loadbalancer.server.port=8080"
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: runner-orchestrator-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - runner-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: runner-orchestrator-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - runner-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

networks:
  runner-network:
    driver: bridge
    labels:
      managed-by: "runner-orchestrator"

volumes:
  orchestrator-logs:
    labels:
      managed-by: "runner-orchestrator"
  redis-data:
    labels:
      managed-by: "runner-orchestrator"
  prometheus-data:
    labels:
      managed-by: "runner-orchestrator"
